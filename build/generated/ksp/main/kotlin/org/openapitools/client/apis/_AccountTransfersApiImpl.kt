// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import org.openapitools.client.models.GetAccountTransfersPageItems
import org.openapitools.client.models.GetAccountTransfersResponse
import org.openapitools.client.models.GetAccountTransfersTemplateRefundByTransferResponse
import org.openapitools.client.models.GetAccountTransfersTemplateResponse
import org.openapitools.client.models.PostAccountTransfersRefundByTransferRequest
import org.openapitools.client.models.PostAccountTransfersRefundByTransferResponse
import org.openapitools.client.models.PostAccountTransfersRequest
import org.openapitools.client.models.PostAccountTransfersResponse

@OptIn(InternalKtorfitApi::class)
public class _AccountTransfersApiImpl(
  private val _ktorfit: Ktorfit,
) : AccountTransfersApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun create4(postAccountTransfersRequest: PostAccountTransfersRequest):
      PostAccountTransfersResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounttransfers")
        }
        setBody(postAccountTransfersRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostAccountTransfersResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAll18(
    externalId: String?,
    offset: Int?,
    limit: Int?,
    orderBy: String?,
    sortOrder: String?,
    accountDetailId: Long?,
  ): GetAccountTransfersResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounttransfers")
        externalId?.let{ parameter("externalId", "$it") }
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        orderBy?.let{ parameter("orderBy", "$it") }
        sortOrder?.let{ parameter("sortOrder", "$it") }
        accountDetailId?.let{ parameter("accountDetailId", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetAccountTransfersResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveOne9(transferId: Long): GetAccountTransfersPageItems {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounttransfers/${"$transferId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetAccountTransfersPageItems>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun template5(
    fromOfficeId: Long?,
    fromClientId: Long?,
    fromAccountId: Long?,
    fromAccountType: Int?,
    toOfficeId: Long?,
    toClientId: Long?,
    toAccountId: Long?,
    toAccountType: Int?,
  ): GetAccountTransfersTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounttransfers/template")
        fromOfficeId?.let{ parameter("fromOfficeId", "$it") }
        fromClientId?.let{ parameter("fromClientId", "$it") }
        fromAccountId?.let{ parameter("fromAccountId", "$it") }
        fromAccountType?.let{ parameter("fromAccountType", "$it") }
        toOfficeId?.let{ parameter("toOfficeId", "$it") }
        toClientId?.let{ parameter("toClientId", "$it") }
        toAccountId?.let{ parameter("toAccountId", "$it") }
        toAccountType?.let{ parameter("toAccountType", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetAccountTransfersTemplateResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun templateRefundByTransfer(
    fromOfficeId: Long?,
    fromClientId: Long?,
    fromAccountId: Long?,
    fromAccountType: Int?,
    toOfficeId: Long?,
    toClientId: Long?,
    toAccountId: Long?,
    toAccountType: Int?,
  ): GetAccountTransfersTemplateRefundByTransferResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounttransfers/templateRefundByTransfer")
        fromOfficeId?.let{ parameter("fromOfficeId", "$it") }
        fromClientId?.let{ parameter("fromClientId", "$it") }
        fromAccountId?.let{ parameter("fromAccountId", "$it") }
        fromAccountType?.let{ parameter("fromAccountType", "$it") }
        toOfficeId?.let{ parameter("toOfficeId", "$it") }
        toClientId?.let{ parameter("toClientId", "$it") }
        toAccountId?.let{ parameter("toAccountId", "$it") }
        toAccountType?.let{ parameter("toAccountType", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetAccountTransfersTemplateRefundByTransferResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend
      fun templateRefundByTransferPost(postAccountTransfersRefundByTransferRequest: PostAccountTransfersRefundByTransferRequest):
      PostAccountTransfersRefundByTransferResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounttransfers/refundByTransfer")
        }
        setBody(postAccountTransfersRefundByTransferRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostAccountTransfersRefundByTransferResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _AccountTransfersApiProvider : ClassProvider<AccountTransfersApi> {
  override fun create(_ktorfit: Ktorfit): AccountTransfersApi = _AccountTransfersApiImpl(_ktorfit)
}

public fun Ktorfit.createAccountTransfersApi(): AccountTransfersApi = _AccountTransfersApiImpl(this)
