// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteCollateralProductResponse
import org.openapitools.client.models.GetCollateralManagementsResponse
import org.openapitools.client.models.GetCollateralProductTemplate
import org.openapitools.client.models.PostCollateralManagementProductRequest
import org.openapitools.client.models.PostCollateralManagementProductResponse
import org.openapitools.client.models.PutCollateralProductRequest
import org.openapitools.client.models.PutCollateralProductResponse

@OptIn(InternalKtorfitApi::class)
public class _CollateralManagementApiImpl(
  private val _ktorfit: Ktorfit,
) : CollateralManagementApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend
      fun createCollateral1(postCollateralManagementProductRequest: PostCollateralManagementProductRequest):
      PostCollateralManagementProductResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/collateral-management")
        }
        setBody(postCollateralManagementProductRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostCollateralManagementProductResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteCollateral2(collateralId: Long): DeleteCollateralProductResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/collateral-management/${"$collateralId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteCollateralProductResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getAllCollaterals(): List<GetCollateralManagementsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/collateral-management")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetCollateralManagementsResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getCollateral(collateralId: Long): GetCollateralManagementsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/collateral-management/${"$collateralId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetCollateralManagementsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getCollateralTemplate(): List<GetCollateralProductTemplate> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/collateral-management/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetCollateralProductTemplate>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateCollateral2(collateralId: Long,
      putCollateralProductRequest: PutCollateralProductRequest): PutCollateralProductResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/collateral-management/${"$collateralId".encodeURLPath()}")
        }
        setBody(putCollateralProductRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutCollateralProductResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _CollateralManagementApiProvider : ClassProvider<CollateralManagementApi> {
  override fun create(_ktorfit: Ktorfit): CollateralManagementApi =
      _CollateralManagementApiImpl(_ktorfit)
}

public fun Ktorfit.createCollateralManagementApi(): CollateralManagementApi =
    _CollateralManagementApiImpl(this)
