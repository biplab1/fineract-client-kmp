// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Any
import kotlin.Boolean
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteDataTablesDatatableAppTableIdDatatableIdResponse
import org.openapitools.client.models.DeleteDataTablesDatatableAppTableIdResponse
import org.openapitools.client.models.DeleteDataTablesResponse
import org.openapitools.client.models.GetDataTablesResponse
import org.openapitools.client.models.PagedLocalRequestAdvancedQueryData
import org.openapitools.client.models.PostDataTablesAppTableIdResponse
import org.openapitools.client.models.PostDataTablesRequest
import org.openapitools.client.models.PostDataTablesResponse
import org.openapitools.client.models.PutDataTablesAppTableIdDatatableIdResponse
import org.openapitools.client.models.PutDataTablesAppTableIdResponse
import org.openapitools.client.models.PutDataTablesRequest
import org.openapitools.client.models.PutDataTablesResponse

@OptIn(InternalKtorfitApi::class)
public class _DataTablesApiImpl(
  private val _ktorfit: Ktorfit,
) : DataTablesApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun advancedQuery(datatable: String,
      pagedLocalRequestAdvancedQueryData: PagedLocalRequestAdvancedQueryData?): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/datatables/${"$datatable".encodeURLPath()}/query")
        }
        setBody(pagedLocalRequestAdvancedQueryData) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun createDatatable(postDataTablesRequest: PostDataTablesRequest):
      PostDataTablesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/datatables")
        }
        setBody(postDataTablesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostDataTablesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun createDatatableEntry(
    datatable: String,
    apptableId: Long,
    body: String,
  ): PostDataTablesAppTableIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/datatables/${"$datatable".encodeURLPath()}/${"$apptableId".encodeURLPath()}")
        }
        setBody(body) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostDataTablesAppTableIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteDatatable(datatableName: String): DeleteDataTablesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/datatables/${"$datatableName".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteDataTablesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteDatatableEntries(datatable: String, apptableId: Long):
      DeleteDataTablesDatatableAppTableIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/datatables/${"$datatable".encodeURLPath()}/${"$apptableId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteDataTablesDatatableAppTableIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteDatatableEntry(
    datatable: String,
    apptableId: Long,
    datatableId: Long,
  ): DeleteDataTablesDatatableAppTableIdDatatableIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/datatables/${"$datatable".encodeURLPath()}/${"$apptableId".encodeURLPath()}/${"$datatableId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteDataTablesDatatableAppTableIdDatatableIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deregisterDatatable(datatable: String): PutDataTablesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/datatables/deregister/${"$datatable".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutDataTablesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getDatatable(datatable: String): GetDataTablesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/datatables/${"$datatable".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetDataTablesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getDatatable1(
    datatable: String,
    apptableId: Long,
    order: String?,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/datatables/${"$datatable".encodeURLPath()}/${"$apptableId".encodeURLPath()}")
        order?.let{ parameter("order", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getDatatableManyEntry(
    datatable: String,
    apptableId: Long,
    datatableId: Long,
    order: String?,
    genericResultSet: Boolean?,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/datatables/${"$datatable".encodeURLPath()}/${"$apptableId".encodeURLPath()}/${"$datatableId".encodeURLPath()}")
        order?.let{ parameter("order", "$it") }
        genericResultSet?.let{ parameter("genericResultSet", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getDatatables(apptable: String?): List<GetDataTablesResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/datatables")
        apptable?.let{ parameter("apptable", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetDataTablesResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun queryValues(
    datatable: String,
    columnFilter: String?,
    valueFilter: String?,
    resultColumns: String?,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/datatables/${"$datatable".encodeURLPath()}/query")
        columnFilter?.let{ parameter("columnFilter", "$it") }
        valueFilter?.let{ parameter("valueFilter", "$it") }
        resultColumns?.let{ parameter("resultColumns", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun registerDatatable(
    datatable: String,
    apptable: String,
    body: Any?,
  ): PutDataTablesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/datatables/register/${"$datatable".encodeURLPath()}/${"$apptable".encodeURLPath()}")
        }
        setBody(body) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutDataTablesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateDatatable(datatableName: String,
      putDataTablesRequest: PutDataTablesRequest): PutDataTablesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/datatables/${"$datatableName".encodeURLPath()}")
        }
        setBody(putDataTablesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutDataTablesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateDatatableEntryOneToMany(
    datatable: String,
    apptableId: Long,
    datatableId: Long,
    body: String,
  ): PutDataTablesAppTableIdDatatableIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/datatables/${"$datatable".encodeURLPath()}/${"$apptableId".encodeURLPath()}/${"$datatableId".encodeURLPath()}")
        }
        setBody(body) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutDataTablesAppTableIdDatatableIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateDatatableEntryOnetoOne(
    datatable: String,
    apptableId: Long,
    body: String,
  ): PutDataTablesAppTableIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/datatables/${"$datatable".encodeURLPath()}/${"$apptableId".encodeURLPath()}")
        }
        setBody(body) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutDataTablesAppTableIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _DataTablesApiProvider : ClassProvider<DataTablesApi> {
  override fun create(_ktorfit: Ktorfit): DataTablesApi = _DataTablesApiImpl(_ktorfit)
}

public fun Ktorfit.createDataTablesApi(): DataTablesApi = _DataTablesApiImpl(this)
