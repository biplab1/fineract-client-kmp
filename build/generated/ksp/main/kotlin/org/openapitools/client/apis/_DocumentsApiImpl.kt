// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.forms.FormDataContent
import io.ktor.client.request.forms.MultiPartFormDataContent
import io.ktor.client.request.forms.formData
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.Parameters
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import okhttp3.MultipartBody
import org.openapitools.client.models.DeleteEntityTypeEntityIdDocumentsResponse
import org.openapitools.client.models.GetEntityTypeEntityIdDocumentsResponse
import org.openapitools.client.models.PostEntityTypeEntityIdDocumentsResponse
import org.openapitools.client.models.PutEntityTypeEntityIdDocumentsResponse

@OptIn(InternalKtorfitApi::class)
public class _DocumentsApiImpl(
  private val _ktorfit: Ktorfit,
) : DocumentsApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun createDocument(
    entityType: String,
    entityId: Long,
    contentLength: Long?,
    dateFormat: String,
    description: String,
    locale: String,
    name: String,
    uploadedInputStream: MultipartBody.Part,
  ): PostEntityTypeEntityIdDocumentsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/${"$entityType".encodeURLPath()}/${"$entityId".encodeURLPath()}/documents")
        }
        headers{
        contentLength?.let{ append("Content-Length", "$contentLength") }
        }
        val __formData = formData {
        dateFormat?.let{ append("dateFormat", "${it}") }
        description?.let{ append("description", "${it}") }
        locale?.let{ append("locale", "${it}") }
        name?.let{ append("name", "${it}") }
        uploadedInputStream?.let{ append("", "${it}") }
        }
        setBody(MultiPartFormDataContent(__formData))
         
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostEntityTypeEntityIdDocumentsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteDocument(
    entityType: String,
    entityId: Long,
    documentId: Long,
  ): DeleteEntityTypeEntityIdDocumentsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/${"$entityType".encodeURLPath()}/${"$entityId".encodeURLPath()}/documents/${"$documentId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteEntityTypeEntityIdDocumentsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun downloadFile(
    entityType: String,
    entityId: Long,
    documentId: Long,
  ) {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/${"$entityType".encodeURLPath()}/${"$entityId".encodeURLPath()}/documents/${"$documentId".encodeURLPath()}/attachment")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<Unit>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getDocument(
    entityType: String,
    entityId: Long,
    documentId: Long,
  ): GetEntityTypeEntityIdDocumentsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/${"$entityType".encodeURLPath()}/${"$entityId".encodeURLPath()}/documents/${"$documentId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetEntityTypeEntityIdDocumentsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAllDocuments(entityType: String, entityId: Long):
      List<GetEntityTypeEntityIdDocumentsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/${"$entityType".encodeURLPath()}/${"$entityId".encodeURLPath()}/documents")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetEntityTypeEntityIdDocumentsResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateDocument(
    entityType: String,
    entityId: Long,
    documentId: Long,
    contentLength: Long?,
    dateFormat: String,
    description: String,
    locale: String,
    name: String,
    uploadedInputStream: MultipartBody.Part,
  ): PutEntityTypeEntityIdDocumentsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/${"$entityType".encodeURLPath()}/${"$entityId".encodeURLPath()}/documents/${"$documentId".encodeURLPath()}")
        }
        headers{
        contentLength?.let{ append("Content-Length", "$contentLength") }
        }
        val __formData = formData {
        dateFormat?.let{ append("dateFormat", "${it}") }
        description?.let{ append("description", "${it}") }
        locale?.let{ append("locale", "${it}") }
        name?.let{ append("name", "${it}") }
        uploadedInputStream?.let{ append("", "${it}") }
        }
        setBody(MultiPartFormDataContent(__formData))
         
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutEntityTypeEntityIdDocumentsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _DocumentsApiProvider : ClassProvider<DocumentsApi> {
  override fun create(_ktorfit: Ktorfit): DocumentsApi = _DocumentsApiImpl(_ktorfit)
}

public fun Ktorfit.createDocumentsApi(): DocumentsApi = _DocumentsApiImpl(this)
