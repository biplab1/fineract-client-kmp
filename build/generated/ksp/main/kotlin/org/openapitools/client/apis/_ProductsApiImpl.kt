// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import org.openapitools.client.models.GetProductsTypeProductIdResponse
import org.openapitools.client.models.GetProductsTypeResponse
import org.openapitools.client.models.PostProductsTypeRequest
import org.openapitools.client.models.PostProductsTypeResponse
import org.openapitools.client.models.PutProductsTypeProductIdRequest
import org.openapitools.client.models.PutProductsTypeProductIdResponse

@OptIn(InternalKtorfitApi::class)
public class _ProductsApiImpl(
  private val _ktorfit: Ktorfit,
) : ProductsApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun createProduct(type: String,
      postProductsTypeRequest: PostProductsTypeRequest): PostProductsTypeResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/products/${"$type".encodeURLPath()}")
        }
        setBody(postProductsTypeRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostProductsTypeResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun handleCommands3(
    type: String,
    productId: Long,
    command: String?,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/products/${"$type".encodeURLPath()}/${"$productId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAllProducts(
    type: String,
    offset: Int?,
    limit: Int?,
  ): GetProductsTypeResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/products/${"$type".encodeURLPath()}")
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetProductsTypeResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveProduct(productId: Long, type: String):
      GetProductsTypeProductIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/products/${"$type".encodeURLPath()}/${"$productId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetProductsTypeProductIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveTemplate13(type: String): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/products/${"$type".encodeURLPath()}/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateProduct(
    type: String,
    productId: Long,
    putProductsTypeProductIdRequest: PutProductsTypeProductIdRequest,
  ): PutProductsTypeProductIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/products/${"$type".encodeURLPath()}/${"$productId".encodeURLPath()}")
        }
        setBody(putProductsTypeProductIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutProductsTypeProductIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _ProductsApiProvider : ClassProvider<ProductsApi> {
  override fun create(_ktorfit: Ktorfit): ProductsApi = _ProductsApiImpl(_ktorfit)
}

public fun Ktorfit.createProductsApi(): ProductsApi = _ProductsApiImpl(this)
