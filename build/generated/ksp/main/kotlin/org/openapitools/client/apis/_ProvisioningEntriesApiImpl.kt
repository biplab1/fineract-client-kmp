// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.LoanProductProvisioningEntryData
import org.openapitools.client.models.PostProvisioningEntriesRequest
import org.openapitools.client.models.PostProvisioningEntriesResponse
import org.openapitools.client.models.ProvisioningEntryData
import org.openapitools.client.models.PutProvisioningEntriesRequest
import org.openapitools.client.models.PutProvisioningEntriesResponse

@OptIn(InternalKtorfitApi::class)
public class _ProvisioningEntriesApiImpl(
  private val _ktorfit: Ktorfit,
) : ProvisioningEntriesApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend
      fun createProvisioningEntries(postProvisioningEntriesRequest: PostProvisioningEntriesRequest?):
      PostProvisioningEntriesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/provisioningentries")
        }
        setBody(postProvisioningEntriesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostProvisioningEntriesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun modifyProvisioningEntry(
    entryId: Long,
    command: String?,
    putProvisioningEntriesRequest: PutProvisioningEntriesRequest?,
  ): PutProvisioningEntriesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/provisioningentries/${"$entryId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(putProvisioningEntriesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutProvisioningEntriesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAllProvisioningEntries(offset: Int?, limit: Int?):
      List<ProvisioningEntryData> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/provisioningentries")
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<ProvisioningEntryData>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveProviioningEntries(
    entryId: Long?,
    offset: Int?,
    limit: Int?,
    officeId: Long?,
    productId: Long?,
    categoryId: Long?,
  ): LoanProductProvisioningEntryData {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/provisioningentries/entries")
        entryId?.let{ parameter("entryId", "$it") }
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        officeId?.let{ parameter("officeId", "$it") }
        productId?.let{ parameter("productId", "$it") }
        categoryId?.let{ parameter("categoryId", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<LoanProductProvisioningEntryData>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveProvisioningEntry(entryId: Long): ProvisioningEntryData {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/provisioningentries/${"$entryId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<ProvisioningEntryData>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _ProvisioningEntriesApiProvider : ClassProvider<ProvisioningEntriesApi> {
  override fun create(_ktorfit: Ktorfit): ProvisioningEntriesApi =
      _ProvisioningEntriesApiImpl(_ktorfit)
}

public fun Ktorfit.createProvisioningEntriesApi(): ProvisioningEntriesApi =
    _ProvisioningEntriesApiImpl(this)
