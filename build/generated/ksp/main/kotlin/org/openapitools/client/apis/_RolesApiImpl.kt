// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteRolesRoleIdResponse
import org.openapitools.client.models.GetRolesResponse
import org.openapitools.client.models.GetRolesRoleIdPermissionsResponse
import org.openapitools.client.models.GetRolesRoleIdResponse
import org.openapitools.client.models.PostRolesRequest
import org.openapitools.client.models.PostRolesResponse
import org.openapitools.client.models.PostRolesRoleIdResponse
import org.openapitools.client.models.PutRolesRoleIdPermissionsRequest
import org.openapitools.client.models.PutRolesRoleIdPermissionsResponse
import org.openapitools.client.models.PutRolesRoleIdRequest
import org.openapitools.client.models.PutRolesRoleIdResponse

@OptIn(InternalKtorfitApi::class)
public class _RolesApiImpl(
  private val _ktorfit: Ktorfit,
) : RolesApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun actionsOnRoles(roleId: Long, command: String?): PostRolesRoleIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/roles/${"$roleId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostRolesRoleIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun createRole(postRolesRequest: PostRolesRequest): PostRolesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/roles")
        }
        setBody(postRolesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostRolesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteRole(roleId: Long): DeleteRolesRoleIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/roles/${"$roleId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteRolesRoleIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAllRoles(): List<GetRolesResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/roles")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetRolesResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveRole(roleId: Long): GetRolesRoleIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/roles/${"$roleId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetRolesRoleIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveRolePermissions(roleId: Long): GetRolesRoleIdPermissionsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/roles/${"$roleId".encodeURLPath()}/permissions")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetRolesRoleIdPermissionsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateRole(roleId: Long, putRolesRoleIdRequest: PutRolesRoleIdRequest):
      PutRolesRoleIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/roles/${"$roleId".encodeURLPath()}")
        }
        setBody(putRolesRoleIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutRolesRoleIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateRolePermissions(roleId: Long,
      putRolesRoleIdPermissionsRequest: PutRolesRoleIdPermissionsRequest):
      PutRolesRoleIdPermissionsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/roles/${"$roleId".encodeURLPath()}/permissions")
        }
        setBody(putRolesRoleIdPermissionsRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutRolesRoleIdPermissionsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _RolesApiProvider : ClassProvider<RolesApi> {
  override fun create(_ktorfit: Ktorfit): RolesApi = _RolesApiImpl(_ktorfit)
}

public fun Ktorfit.createRolesApi(): RolesApi = _RolesApiImpl(this)
