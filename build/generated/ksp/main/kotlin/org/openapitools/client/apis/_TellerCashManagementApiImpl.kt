// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteTellersTellerIdCashiersCashierIdResponse
import org.openapitools.client.models.GetTellersResponse
import org.openapitools.client.models.GetTellersTellerIdCashiersCashierIdResponse
import org.openapitools.client.models.GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse
import org.openapitools.client.models.GetTellersTellerIdCashiersCashiersIdTransactionsResponse
import org.openapitools.client.models.GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse
import org.openapitools.client.models.GetTellersTellerIdCashiersResponse
import org.openapitools.client.models.GetTellersTellerIdCashiersTemplateResponse
import org.openapitools.client.models.PostTellersRequest
import org.openapitools.client.models.PostTellersResponse
import org.openapitools.client.models.PostTellersTellerIdCashiersCashierIdAllocateRequest
import org.openapitools.client.models.PostTellersTellerIdCashiersCashierIdAllocateResponse
import org.openapitools.client.models.PostTellersTellerIdCashiersCashierIdSettleRequest
import org.openapitools.client.models.PostTellersTellerIdCashiersCashierIdSettleResponse
import org.openapitools.client.models.PostTellersTellerIdCashiersRequest
import org.openapitools.client.models.PostTellersTellerIdCashiersResponse
import org.openapitools.client.models.PutTellersRequest
import org.openapitools.client.models.PutTellersResponse
import org.openapitools.client.models.PutTellersTellerIdCashiersCashierIdRequest
import org.openapitools.client.models.PutTellersTellerIdCashiersCashierIdResponse

@OptIn(InternalKtorfitApi::class)
public class _TellerCashManagementApiImpl(
  private val _ktorfit: Ktorfit,
) : TellerCashManagementApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun allocateCashToCashier(
    tellerId: Long,
    cashierId: Long,
    postTellersTellerIdCashiersCashierIdAllocateRequest: PostTellersTellerIdCashiersCashierIdAllocateRequest,
  ): PostTellersTellerIdCashiersCashierIdAllocateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers/${"$cashierId".encodeURLPath()}/allocate")
        }
        setBody(postTellersTellerIdCashiersCashierIdAllocateRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostTellersTellerIdCashiersCashierIdAllocateResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun createCashier(tellerId: Long,
      postTellersTellerIdCashiersRequest: PostTellersTellerIdCashiersRequest):
      PostTellersTellerIdCashiersResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers")
        }
        setBody(postTellersTellerIdCashiersRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostTellersTellerIdCashiersResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun createTeller(postTellersRequest: PostTellersRequest): PostTellersResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers")
        }
        setBody(postTellersRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostTellersResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteCashier(tellerId: Long, cashierId: Long):
      DeleteTellersTellerIdCashiersCashierIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers/${"$cashierId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteTellersTellerIdCashiersCashierIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteTeller(tellerId: Long): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers/${"$tellerId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun findCashierData(tellerId: Long, cashierId: Long):
      GetTellersTellerIdCashiersCashierIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers/${"$cashierId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetTellersTellerIdCashiersCashierIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun findTeller(tellerId: Long): GetTellersResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers/${"$tellerId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetTellersResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun findTransactionData(tellerId: Long, transactionId: Long): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/tellers/${"$tellerId".encodeURLPath()}/transactions/${"$transactionId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getCashierData1(
    tellerId: Long,
    fromdate: String?,
    todate: String?,
  ): GetTellersTellerIdCashiersResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers")
        fromdate?.let{ parameter("fromdate", "$it") }
        todate?.let{ parameter("todate", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetTellersTellerIdCashiersResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getCashierTemplate(tellerId: Long):
      GetTellersTellerIdCashiersTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetTellersTellerIdCashiersTemplateResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getCashierTxnTemplate(tellerId: Long, cashierId: Long):
      GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers/${"$cashierId".encodeURLPath()}/transactions/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getJournalData(
    tellerId: Long,
    cashierId: Long?,
    dateRange: String?,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers/${"$tellerId".encodeURLPath()}/journals")
        cashierId?.let{ parameter("cashierId", "$it") }
        dateRange?.let{ parameter("dateRange", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getTellerData(officeId: Long?): List<GetTellersResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers")
        officeId?.let{ parameter("officeId", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetTellersResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getTransactionData(tellerId: Long, dateRange: String?): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers/${"$tellerId".encodeURLPath()}/transactions")
        dateRange?.let{ parameter("dateRange", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getTransactionsForCashier(
    tellerId: Long,
    cashierId: Long,
    currencyCode: String?,
    offset: Int?,
    limit: Int?,
    orderBy: String?,
    sortOrder: String?,
  ): List<GetTellersTellerIdCashiersCashiersIdTransactionsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers/${"$cashierId".encodeURLPath()}/transactions")
        currencyCode?.let{ parameter("currencyCode", "$it") }
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        orderBy?.let{ parameter("orderBy", "$it") }
        sortOrder?.let{ parameter("sortOrder", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetTellersTellerIdCashiersCashiersIdTransactionsResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getTransactionsWtihSummaryForCashier(
    tellerId: Long,
    cashierId: Long,
    currencyCode: String?,
    offset: Int?,
    limit: Int?,
    orderBy: String?,
    sortOrder: String?,
  ): GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers/${"$cashierId".encodeURLPath()}/summaryandtransactions")
        currencyCode?.let{ parameter("currencyCode", "$it") }
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        orderBy?.let{ parameter("orderBy", "$it") }
        sortOrder?.let{ parameter("sortOrder", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun settleCashFromCashier(
    tellerId: Long,
    cashierId: Long,
    postTellersTellerIdCashiersCashierIdSettleRequest: PostTellersTellerIdCashiersCashierIdSettleRequest,
  ): PostTellersTellerIdCashiersCashierIdSettleResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers/${"$cashierId".encodeURLPath()}/settle")
        }
        setBody(postTellersTellerIdCashiersCashierIdSettleRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostTellersTellerIdCashiersCashierIdSettleResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateCashier(
    tellerId: Long,
    cashierId: Long,
    putTellersTellerIdCashiersCashierIdRequest: PutTellersTellerIdCashiersCashierIdRequest,
  ): PutTellersTellerIdCashiersCashierIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/tellers/${"$tellerId".encodeURLPath()}/cashiers/${"$cashierId".encodeURLPath()}")
        }
        setBody(putTellersTellerIdCashiersCashierIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutTellersTellerIdCashiersCashierIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateTeller(tellerId: Long, putTellersRequest: PutTellersRequest):
      PutTellersResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/tellers/${"$tellerId".encodeURLPath()}")
        }
        setBody(putTellersRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutTellersResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _TellerCashManagementApiProvider : ClassProvider<TellerCashManagementApi> {
  override fun create(_ktorfit: Ktorfit): TellerCashManagementApi =
      _TellerCashManagementApiImpl(_ktorfit)
}

public fun Ktorfit.createTellerCashManagementApi(): TellerCashManagementApi =
    _TellerCashManagementApiImpl(this)
