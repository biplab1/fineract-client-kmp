// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.AccountingRuleData
import org.openapitools.client.models.DeleteAccountingRulesResponse
import org.openapitools.client.models.GetAccountRulesResponse
import org.openapitools.client.models.GetAccountRulesTemplateResponse
import org.openapitools.client.models.PostAccountingRulesRequest
import org.openapitools.client.models.PostAccountingRulesResponse
import org.openapitools.client.models.PutAccountingRulesRequest
import org.openapitools.client.models.PutAccountingRulesResponse

@OptIn(InternalKtorfitApi::class)
public class _AccountingRulesApiImpl(
  private val _ktorfit: Ktorfit,
) : AccountingRulesApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend
      fun createAccountingRule(postAccountingRulesRequest: PostAccountingRulesRequest?):
      PostAccountingRulesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accountingrules")
        }
        setBody(postAccountingRulesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostAccountingRulesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteAccountingRule(accountingRuleId: Long): DeleteAccountingRulesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accountingrules/${"$accountingRuleId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteAccountingRulesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retreiveAccountingRule(accountingRuleId: Long): AccountingRuleData {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accountingrules/${"$accountingRuleId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<AccountingRuleData>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAllAccountingRules(): List<GetAccountRulesResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accountingrules")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetAccountRulesResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveTemplate1(): GetAccountRulesTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accountingrules/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetAccountRulesTemplateResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateAccountingRule(accountingRuleId: Long,
      putAccountingRulesRequest: PutAccountingRulesRequest?): PutAccountingRulesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accountingrules/${"$accountingRuleId".encodeURLPath()}")
        }
        setBody(putAccountingRulesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutAccountingRulesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _AccountingRulesApiProvider : ClassProvider<AccountingRulesApi> {
  override fun create(_ktorfit: Ktorfit): AccountingRulesApi = _AccountingRulesApiImpl(_ktorfit)
}

public fun Ktorfit.createAccountingRulesApi(): AccountingRulesApi = _AccountingRulesApiImpl(this)
