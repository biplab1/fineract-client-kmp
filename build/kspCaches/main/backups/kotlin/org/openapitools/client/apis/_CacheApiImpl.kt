// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.GetCachesResponse
import org.openapitools.client.models.PutCachesRequest
import org.openapitools.client.models.PutCachesResponse

@OptIn(InternalKtorfitApi::class)
public class _CacheApiImpl(
  private val _ktorfit: Ktorfit,
) : CacheApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun retrieveAll4(): List<GetCachesResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/caches")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetCachesResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun switchCache(putCachesRequest: PutCachesRequest): PutCachesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/caches")
        }
        setBody(putCachesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutCachesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _CacheApiProvider : ClassProvider<CacheApi> {
  override fun create(_ktorfit: Ktorfit): CacheApi = _CacheApiImpl(_ktorfit)
}

public fun Ktorfit.createCacheApi(): CacheApi = _CacheApiImpl(this)
