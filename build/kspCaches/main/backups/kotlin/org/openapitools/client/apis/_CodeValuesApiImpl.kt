// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteCodeValueDataResponse
import org.openapitools.client.models.GetCodeValuesDataResponse
import org.openapitools.client.models.PostCodeValueDataResponse
import org.openapitools.client.models.PostCodeValuesDataRequest
import org.openapitools.client.models.PutCodeValueDataResponse
import org.openapitools.client.models.PutCodeValuesDataRequest

@OptIn(InternalKtorfitApi::class)
public class _CodeValuesApiImpl(
  private val _ktorfit: Ktorfit,
) : CodeValuesApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun createCodeValue(codeId: Long,
      postCodeValuesDataRequest: PostCodeValuesDataRequest): PostCodeValueDataResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/codes/${"$codeId".encodeURLPath()}/codevalues")
        }
        setBody(postCodeValuesDataRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostCodeValueDataResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteCodeValue(codeId: Long, codeValueId: Long):
      DeleteCodeValueDataResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/codes/${"$codeId".encodeURLPath()}/codevalues/${"$codeValueId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteCodeValueDataResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAllCodeValues(codeId: Long): List<GetCodeValuesDataResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/codes/${"$codeId".encodeURLPath()}/codevalues")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetCodeValuesDataResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveCodeValue(codeValueId: Long, codeId: Long):
      GetCodeValuesDataResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/codes/${"$codeId".encodeURLPath()}/codevalues/${"$codeValueId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetCodeValuesDataResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateCodeValue(
    codeId: Long,
    codeValueId: Long,
    putCodeValuesDataRequest: PutCodeValuesDataRequest,
  ): PutCodeValueDataResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/codes/${"$codeId".encodeURLPath()}/codevalues/${"$codeValueId".encodeURLPath()}")
        }
        setBody(putCodeValuesDataRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutCodeValueDataResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _CodeValuesApiProvider : ClassProvider<CodeValuesApi> {
  override fun create(_ktorfit: Ktorfit): CodeValuesApi = _CodeValuesApiImpl(_ktorfit)
}

public fun Ktorfit.createCodeValuesApi(): CodeValuesApi = _CodeValuesApiImpl(this)
