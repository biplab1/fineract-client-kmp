// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteDelinquencyBucketResponse
import org.openapitools.client.models.DeleteDelinquencyRangeResponse
import org.openapitools.client.models.GetDelinquencyBucketsResponse
import org.openapitools.client.models.GetDelinquencyRangesResponse
import org.openapitools.client.models.PostDelinquencyBucketRequest
import org.openapitools.client.models.PostDelinquencyBucketResponse
import org.openapitools.client.models.PostDelinquencyRangeRequest
import org.openapitools.client.models.PostDelinquencyRangeResponse
import org.openapitools.client.models.PutDelinquencyBucketResponse
import org.openapitools.client.models.PutDelinquencyRangeResponse

@OptIn(InternalKtorfitApi::class)
public class _DelinquencyRangeAndBucketsManagementApiImpl(
  private val _ktorfit: Ktorfit,
) : DelinquencyRangeAndBucketsManagementApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend
      fun createDelinquencyBucket(postDelinquencyBucketRequest: PostDelinquencyBucketRequest):
      PostDelinquencyBucketResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/delinquency/buckets")
        }
        setBody(postDelinquencyBucketRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostDelinquencyBucketResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend
      fun createDelinquencyRange(postDelinquencyRangeRequest: PostDelinquencyRangeRequest):
      PostDelinquencyRangeResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/delinquency/ranges")
        }
        setBody(postDelinquencyRangeRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostDelinquencyRangeResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteDelinquencyBucket(delinquencyBucketId: Long,
      postDelinquencyBucketRequest: PostDelinquencyBucketRequest): DeleteDelinquencyBucketResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/delinquency/buckets/${"$delinquencyBucketId".encodeURLPath()}")
        }
        setBody(postDelinquencyBucketRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteDelinquencyBucketResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteDelinquencyRange(delinquencyRangeId: Long,
      postDelinquencyRangeRequest: PostDelinquencyRangeRequest): DeleteDelinquencyRangeResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/delinquency/ranges/${"$delinquencyRangeId".encodeURLPath()}")
        }
        setBody(postDelinquencyRangeRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteDelinquencyRangeResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getDelinquencyBucket(delinquencyBucketId: Long):
      GetDelinquencyBucketsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/delinquency/buckets/${"$delinquencyBucketId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetDelinquencyBucketsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getDelinquencyBuckets(): List<GetDelinquencyBucketsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/delinquency/buckets")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetDelinquencyBucketsResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getDelinquencyRange(delinquencyRangeId: Long): GetDelinquencyRangesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/delinquency/ranges/${"$delinquencyRangeId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetDelinquencyRangesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getDelinquencyRanges(): List<GetDelinquencyRangesResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/delinquency/ranges")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetDelinquencyRangesResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateDelinquencyBucket(delinquencyBucketId: Long,
      postDelinquencyBucketRequest: PostDelinquencyBucketRequest): PutDelinquencyBucketResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/delinquency/buckets/${"$delinquencyBucketId".encodeURLPath()}")
        }
        setBody(postDelinquencyBucketRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutDelinquencyBucketResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateDelinquencyRange(delinquencyRangeId: Long,
      postDelinquencyRangeRequest: PostDelinquencyRangeRequest): PutDelinquencyRangeResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/delinquency/ranges/${"$delinquencyRangeId".encodeURLPath()}")
        }
        setBody(postDelinquencyRangeRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutDelinquencyRangeResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _DelinquencyRangeAndBucketsManagementApiProvider :
    ClassProvider<DelinquencyRangeAndBucketsManagementApi> {
  override fun create(_ktorfit: Ktorfit): DelinquencyRangeAndBucketsManagementApi =
      _DelinquencyRangeAndBucketsManagementApiImpl(_ktorfit)
}

public fun Ktorfit.createDelinquencyRangeAndBucketsManagementApi():
    DelinquencyRangeAndBucketsManagementApi = _DelinquencyRangeAndBucketsManagementApiImpl(this)
