// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.forms.FormDataContent
import io.ktor.client.request.forms.MultiPartFormDataContent
import io.ktor.client.request.forms.formData
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.Parameters
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import okhttp3.MultipartBody
import org.openapitools.client.models.DeleteGLAccountsRequest
import org.openapitools.client.models.GetGLAccountsResponse
import org.openapitools.client.models.GetGLAccountsTemplateResponse
import org.openapitools.client.models.PostGLAccountsRequest
import org.openapitools.client.models.PostGLAccountsResponse
import org.openapitools.client.models.PutGLAccountsRequest
import org.openapitools.client.models.PutGLAccountsResponse

@OptIn(InternalKtorfitApi::class)
public class _GeneralLedgerAccountApiImpl(
  private val _ktorfit: Ktorfit,
) : GeneralLedgerAccountApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun createGLAccount1(postGLAccountsRequest: PostGLAccountsRequest?):
      PostGLAccountsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/glaccounts")
        }
        setBody(postGLAccountsRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostGLAccountsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteGLAccount1(glAccountId: Long): DeleteGLAccountsRequest {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/glaccounts/${"$glAccountId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteGLAccountsRequest>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getGlAccountsTemplate(dateFormat: String?) {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/glaccounts/downloadtemplate")
        dateFormat?.let{ parameter("dateFormat", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<Unit>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun postGlAccountsTemplate(
    dateFormat: String,
    locale: String,
    uploadedInputStream: MultipartBody.Part,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/glaccounts/uploadtemplate")
        }
        val __formData = formData {
        dateFormat?.let{ append("dateFormat", "${it}") }
        locale?.let{ append("locale", "${it}") }
        uploadedInputStream?.let{ append("", "${it}") }
        }
        setBody(MultiPartFormDataContent(__formData))
         
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retreiveAccount(glAccountId: Long, fetchRunningBalance: Boolean?):
      GetGLAccountsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/glaccounts/${"$glAccountId".encodeURLPath()}")
        fetchRunningBalance?.let{ parameter("fetchRunningBalance", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetGLAccountsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAllAccounts(
    type: Int?,
    searchParam: String?,
    usage: Int?,
    manualEntriesAllowed: Boolean?,
    disabled: Boolean?,
    fetchRunningBalance: Boolean?,
  ): List<GetGLAccountsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/glaccounts")
        type?.let{ parameter("type", "$it") }
        searchParam?.let{ parameter("searchParam", "$it") }
        usage?.let{ parameter("usage", "$it") }
        manualEntriesAllowed?.let{ parameter("manualEntriesAllowed", "$it") }
        disabled?.let{ parameter("disabled", "$it") }
        fetchRunningBalance?.let{ parameter("fetchRunningBalance", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetGLAccountsResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveNewAccountDetails(type: Int?): GetGLAccountsTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/glaccounts/template")
        type?.let{ parameter("type", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetGLAccountsTemplateResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateGLAccount1(glAccountId: Long,
      putGLAccountsRequest: PutGLAccountsRequest?): PutGLAccountsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/glaccounts/${"$glAccountId".encodeURLPath()}")
        }
        setBody(putGLAccountsRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutGLAccountsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _GeneralLedgerAccountApiProvider : ClassProvider<GeneralLedgerAccountApi> {
  override fun create(_ktorfit: Ktorfit): GeneralLedgerAccountApi =
      _GeneralLedgerAccountApiImpl(_ktorfit)
}

public fun Ktorfit.createGeneralLedgerAccountApi(): GeneralLedgerAccountApi =
    _GeneralLedgerAccountApiImpl(this)
