// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteHookResponse
import org.openapitools.client.models.GetHookResponse
import org.openapitools.client.models.GetHookTemplateResponse
import org.openapitools.client.models.PostHookRequest
import org.openapitools.client.models.PostHookResponse
import org.openapitools.client.models.PutHookRequest
import org.openapitools.client.models.PutHookResponse

@OptIn(InternalKtorfitApi::class)
public class _HooksApiImpl(
  private val _ktorfit: Ktorfit,
) : HooksApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun createHook(postHookRequest: PostHookRequest): PostHookResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/hooks")
        }
        setBody(postHookRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostHookResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteHook(hookId: Long): DeleteHookResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/hooks/${"$hookId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteHookResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveHook(hookId: Long): GetHookResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/hooks/${"$hookId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetHookResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveHooks(): List<GetHookResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/hooks")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetHookResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun template3(): GetHookTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/hooks/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetHookTemplateResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateHook(hookId: Long, putHookRequest: PutHookRequest): PutHookResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/hooks/${"$hookId".encodeURLPath()}")
        }
        setBody(putHookRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutHookResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _HooksApiProvider : ClassProvider<HooksApi> {
  override fun create(_ktorfit: Ktorfit): HooksApi = _HooksApiImpl(_ktorfit)
}

public fun Ktorfit.createHooksApi(): HooksApi = _HooksApiImpl(this)
