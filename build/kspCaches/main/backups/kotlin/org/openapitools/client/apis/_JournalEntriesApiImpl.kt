// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.forms.FormDataContent
import io.ktor.client.request.forms.MultiPartFormDataContent
import io.ktor.client.request.forms.formData
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.Parameters
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import okhttp3.MultipartBody
import org.openapitools.client.models.GetJournalEntriesTransactionIdResponse
import org.openapitools.client.models.JournalEntryCommand
import org.openapitools.client.models.JournalEntryTransactionItem
import org.openapitools.client.models.PostJournalEntriesResponse
import org.openapitools.client.models.PostJournalEntriesTransactionIdRequest
import org.openapitools.client.models.PostJournalEntriesTransactionIdResponse

@OptIn(InternalKtorfitApi::class)
public class _JournalEntriesApiImpl(
  private val _ktorfit: Ktorfit,
) : JournalEntriesApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun createGLJournalEntry(command: String?,
      journalEntryCommand: JournalEntryCommand?): PostJournalEntriesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/journalentries")
        command?.let{ parameter("command", "$it") }
        }
        setBody(journalEntryCommand) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostJournalEntriesResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun createReversalJournalEntry(
    transactionId: String,
    command: String?,
    postJournalEntriesTransactionIdRequest: PostJournalEntriesTransactionIdRequest?,
  ): PostJournalEntriesTransactionIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/journalentries/${"$transactionId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(postJournalEntriesTransactionIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostJournalEntriesTransactionIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getJournalEntriesTemplate(officeId: Long?, dateFormat: String?) {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/journalentries/downloadtemplate")
        officeId?.let{ parameter("officeId", "$it") }
        dateFormat?.let{ parameter("dateFormat", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<Unit>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun postJournalEntriesTemplate(
    dateFormat: String,
    locale: String,
    uploadedInputStream: MultipartBody.Part,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/journalentries/uploadtemplate")
        }
        val __formData = formData {
        dateFormat?.let{ append("dateFormat", "${it}") }
        locale?.let{ append("locale", "${it}") }
        uploadedInputStream?.let{ append("", "${it}") }
        }
        setBody(MultiPartFormDataContent(__formData))
         
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAll1(
    officeId: Long?,
    glAccountId: Long?,
    manualEntriesOnly: Boolean?,
    fromDate: String?,
    toDate: String?,
    submittedOnDateFrom: String?,
    submittedOnDateTo: String?,
    transactionId: String?,
    entityType: Int?,
    offset: Int?,
    limit: Int?,
    orderBy: String?,
    sortOrder: String?,
    locale: String?,
    dateFormat: String?,
    loanId: Long?,
    savingsId: Long?,
    runningBalance: Boolean?,
    transactionDetails: Boolean?,
  ): GetJournalEntriesTransactionIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/journalentries")
        officeId?.let{ parameter("officeId", "$it") }
        glAccountId?.let{ parameter("glAccountId", "$it") }
        manualEntriesOnly?.let{ parameter("manualEntriesOnly", "$it") }
        fromDate?.let{ parameter("fromDate", "$it") }
        toDate?.let{ parameter("toDate", "$it") }
        submittedOnDateFrom?.let{ parameter("submittedOnDateFrom", "$it") }
        submittedOnDateTo?.let{ parameter("submittedOnDateTo", "$it") }
        transactionId?.let{ parameter("transactionId", "$it") }
        entityType?.let{ parameter("entityType", "$it") }
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        orderBy?.let{ parameter("orderBy", "$it") }
        sortOrder?.let{ parameter("sortOrder", "$it") }
        locale?.let{ parameter("locale", "$it") }
        dateFormat?.let{ parameter("dateFormat", "$it") }
        loanId?.let{ parameter("loanId", "$it") }
        savingsId?.let{ parameter("savingsId", "$it") }
        runningBalance?.let{ parameter("runningBalance", "$it") }
        transactionDetails?.let{ parameter("transactionDetails", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetJournalEntriesTransactionIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveJournalEntries(
    offset: Int?,
    limit: Int?,
    entryId: Long?,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/journalentries/provisioning")
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        entryId?.let{ parameter("entryId", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveJournalEntryById(
    journalEntryId: Long,
    runningBalance: Boolean?,
    transactionDetails: Boolean?,
  ): JournalEntryTransactionItem {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/journalentries/${"$journalEntryId".encodeURLPath()}")
        runningBalance?.let{ parameter("runningBalance", "$it") }
        transactionDetails?.let{ parameter("transactionDetails", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<JournalEntryTransactionItem>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveOpeningBalance(officeId: Long?, currencyCode: String?): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/journalentries/openingbalance")
        officeId?.let{ parameter("officeId", "$it") }
        currencyCode?.let{ parameter("currencyCode", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _JournalEntriesApiProvider : ClassProvider<JournalEntriesApi> {
  override fun create(_ktorfit: Ktorfit): JournalEntriesApi = _JournalEntriesApiImpl(_ktorfit)
}

public fun Ktorfit.createJournalEntriesApi(): JournalEntriesApi = _JournalEntriesApiImpl(this)
