// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteRecurringDepositProductsProductIdResponse
import org.openapitools.client.models.GetRecurringDepositProductsProductIdResponse
import org.openapitools.client.models.GetRecurringDepositProductsResponse
import org.openapitools.client.models.PostRecurringDepositProductsRequest
import org.openapitools.client.models.PostRecurringDepositProductsResponse
import org.openapitools.client.models.PutRecurringDepositProductsRequest
import org.openapitools.client.models.PutRecurringDepositProductsResponse

@OptIn(InternalKtorfitApi::class)
public class _RecurringDepositProductApiImpl(
  private val _ktorfit: Ktorfit,
) : RecurringDepositProductApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend
      fun create12(postRecurringDepositProductsRequest: PostRecurringDepositProductsRequest):
      PostRecurringDepositProductsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/recurringdepositproducts")
        }
        setBody(postRecurringDepositProductsRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostRecurringDepositProductsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun delete18(productId: Long): DeleteRecurringDepositProductsProductIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/recurringdepositproducts/${"$productId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteRecurringDepositProductsProductIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAll32(): List<GetRecurringDepositProductsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/recurringdepositproducts")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetRecurringDepositProductsResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveOne23(productId: Long):
      GetRecurringDepositProductsProductIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/recurringdepositproducts/${"$productId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetRecurringDepositProductsProductIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveTemplate17(): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/recurringdepositproducts/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun update19(productId: Long,
      putRecurringDepositProductsRequest: PutRecurringDepositProductsRequest):
      PutRecurringDepositProductsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/recurringdepositproducts/${"$productId".encodeURLPath()}")
        }
        setBody(putRecurringDepositProductsRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutRecurringDepositProductsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _RecurringDepositProductApiProvider : ClassProvider<RecurringDepositProductApi> {
  override fun create(_ktorfit: Ktorfit): RecurringDepositProductApi =
      _RecurringDepositProductApiImpl(_ktorfit)
}

public fun Ktorfit.createRecurringDepositProductApi(): RecurringDepositProductApi =
    _RecurringDepositProductApiImpl(this)
