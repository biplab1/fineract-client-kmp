// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Any
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteReportMailingJobsResponse
import org.openapitools.client.models.GetReportMailingJobsResponse
import org.openapitools.client.models.GetReportMailingJobsTemplate
import org.openapitools.client.models.PostReportMailingJobsRequest
import org.openapitools.client.models.PostReportMailingJobsResponse
import org.openapitools.client.models.PutReportMailingJobsRequest
import org.openapitools.client.models.PutReportMailingJobsResponse

@OptIn(InternalKtorfitApi::class)
public class _ReportMailingJobsApiImpl(
  private val _ktorfit: Ktorfit,
) : ReportMailingJobsApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend
      fun createReportMailingJob(postReportMailingJobsRequest: PostReportMailingJobsRequest):
      PostReportMailingJobsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reportmailingjobs")
        }
        setBody(postReportMailingJobsRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostReportMailingJobsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteReportMailingJob(entityId: Long, body: Any):
      DeleteReportMailingJobsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reportmailingjobs/${"$entityId".encodeURLPath()}")
        }
        setBody(body) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteReportMailingJobsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAllReportMailingJobs(
    offset: Int?,
    limit: Int?,
    orderBy: String?,
    sortOrder: String?,
  ): List<GetReportMailingJobsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reportmailingjobs")
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        orderBy?.let{ parameter("orderBy", "$it") }
        sortOrder?.let{ parameter("sortOrder", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetReportMailingJobsResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveReportMailingJob(entityId: Long): GetReportMailingJobsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reportmailingjobs/${"$entityId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetReportMailingJobsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveReportMailingJobTemplate(): GetReportMailingJobsTemplate {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reportmailingjobs/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetReportMailingJobsTemplate>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateReportMailingJob(entityId: Long,
      putReportMailingJobsRequest: PutReportMailingJobsRequest): PutReportMailingJobsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reportmailingjobs/${"$entityId".encodeURLPath()}")
        }
        setBody(putReportMailingJobsRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutReportMailingJobsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _ReportMailingJobsApiProvider : ClassProvider<ReportMailingJobsApi> {
  override fun create(_ktorfit: Ktorfit): ReportMailingJobsApi = _ReportMailingJobsApiImpl(_ktorfit)
}

public fun Ktorfit.createReportMailingJobsApi(): ReportMailingJobsApi =
    _ReportMailingJobsApiImpl(this)
