// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteReportsResponse
import org.openapitools.client.models.GetReportsResponse
import org.openapitools.client.models.GetReportsTemplateResponse
import org.openapitools.client.models.PostReportsResponse
import org.openapitools.client.models.PostRepostRequest
import org.openapitools.client.models.PutReportRequest
import org.openapitools.client.models.PutReportResponse

@OptIn(InternalKtorfitApi::class)
public class _ReportsApiImpl(
  private val _ktorfit: Ktorfit,
) : ReportsApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun createReport(postRepostRequest: PostRepostRequest): PostReportsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reports")
        }
        setBody(postRepostRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostReportsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun deleteReport(id: Long): DeleteReportsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reports/${"$id".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<DeleteReportsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveOfficeTemplate(): GetReportsTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reports/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetReportsTemplateResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveReport(id: Long): GetReportsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reports/${"$id".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetReportsResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveReportList(): List<GetReportsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reports")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<List<GetReportsResponse>>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateReport(id: Long, putReportRequest: PutReportRequest):
      PutReportResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/reports/${"$id".encodeURLPath()}")
        }
        setBody(putReportRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutReportResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _ReportsApiProvider : ClassProvider<ReportsApi> {
  override fun create(_ktorfit: Ktorfit): ReportsApi = _ReportsApiImpl(_ktorfit)
}

public fun Ktorfit.createReportsApi(): ReportsApi = _ReportsApiImpl(this)
