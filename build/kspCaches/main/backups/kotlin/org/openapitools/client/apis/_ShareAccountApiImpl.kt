// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.ClassProvider
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.converter.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.forms.FormDataContent
import io.ktor.client.request.forms.MultiPartFormDataContent
import io.ktor.client.request.forms.formData
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.Parameters
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import okhttp3.MultipartBody
import org.openapitools.client.models.GetAccountsTypeAccountIdResponse
import org.openapitools.client.models.GetAccountsTypeResponse
import org.openapitools.client.models.GetAccountsTypeTemplateResponse
import org.openapitools.client.models.PostAccountsTypeAccountIdRequest
import org.openapitools.client.models.PostAccountsTypeAccountIdResponse
import org.openapitools.client.models.PostAccountsTypeRequest
import org.openapitools.client.models.PostAccountsTypeResponse
import org.openapitools.client.models.PutAccountsTypeAccountIdRequest
import org.openapitools.client.models.PutAccountsTypeAccountIdResponse

@OptIn(InternalKtorfitApi::class)
public class _ShareAccountApiImpl(
  private val _ktorfit: Ktorfit,
) : ShareAccountApi {
  private val _helper: KtorfitConverterHelper = KtorfitConverterHelper(_ktorfit)

  override suspend fun createAccount(type: String,
      postAccountsTypeRequest: PostAccountsTypeRequest): PostAccountsTypeResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounts/${"$type".encodeURLPath()}")
        }
        setBody(postAccountsTypeRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostAccountsTypeResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun getSharedAccountsTemplate(
    type: String,
    officeId: Long?,
    dateFormat: String?,
  ) {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounts/${"$type".encodeURLPath()}/downloadtemplate")
        officeId?.let{ parameter("officeId", "$it") }
        dateFormat?.let{ parameter("dateFormat", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<Unit>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun handleCommands2(
    type: String,
    accountId: Long,
    postAccountsTypeAccountIdRequest: PostAccountsTypeAccountIdRequest,
    command: String?,
  ): PostAccountsTypeAccountIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/accounts/${"$type".encodeURLPath()}/${"$accountId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(postAccountsTypeAccountIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PostAccountsTypeAccountIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun postSharedAccountsTemplate(
    type: String,
    dateFormat: String,
    locale: String,
    uploadedInputStream: MultipartBody.Part,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounts/${"$type".encodeURLPath()}/uploadtemplate")
        }
        val __formData = formData {
        dateFormat?.let{ append("dateFormat", "${it}") }
        locale?.let{ append("locale", "${it}") }
        uploadedInputStream?.let{ append("", "${it}") }
        }
        setBody(MultiPartFormDataContent(__formData))
         
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<String>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAccount(accountId: Long, type: String):
      GetAccountsTypeAccountIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/accounts/${"$type".encodeURLPath()}/${"$accountId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetAccountsTypeAccountIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun retrieveAllAccounts1(
    type: String,
    offset: Int?,
    limit: Int?,
  ): GetAccountsTypeResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounts/${"$type".encodeURLPath()}")
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetAccountsTypeResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun template7(
    type: String,
    clientId: Long?,
    productId: Long?,
  ): GetAccountsTypeTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_ktorfit.baseUrl + "v1/accounts/${"$type".encodeURLPath()}/template")
        clientId?.let{ parameter("clientId", "$it") }
        productId?.let{ parameter("productId", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<GetAccountsTypeTemplateResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }

  override suspend fun updateAccount(
    type: String,
    accountId: Long,
    putAccountsTypeAccountIdRequest: PutAccountsTypeAccountIdRequest,
  ): PutAccountsTypeAccountIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_ktorfit.baseUrl +
            "v1/accounts/${"$type".encodeURLPath()}/${"$accountId".encodeURLPath()}")
        }
        setBody(putAccountsTypeAccountIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    typeInfo = typeInfo<PutAccountsTypeAccountIdResponse>(),
    )
    return _helper.suspendRequest(_typeData,_ext)!!
  }
}

public class _ShareAccountApiProvider : ClassProvider<ShareAccountApi> {
  override fun create(_ktorfit: Ktorfit): ShareAccountApi = _ShareAccountApiImpl(_ktorfit)
}

public fun Ktorfit.createShareAccountApi(): ShareAccountApi = _ShareAccountApiImpl(this)
